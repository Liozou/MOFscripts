using MacroTools
precompile(Tuple{typeof(MacroTools.__init__)})

using TextWrap
precompile(Tuple{getfield(TextWrap, Symbol("#wrap##kw")), NamedTuple{(:break_long_words, :break_on_hyphens), Tuple{Bool, Bool}}, typeof(TextWrap.wrap), Base.SubString{String}})
precompile(Tuple{getfield(TextWrap, Symbol("#wrap##kw")), NamedTuple{(:break_long_words, :break_on_hyphens, :initial_indent, :subsequent_indent), Tuple{Bool, Bool, String, String}}, typeof(TextWrap.wrap), String})

using Random
using Logging
using Statistics
using Libdl

precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
# precompile(Tuple{typeof(Chemfiles_jll.__init__)})
precompile(Tuple{typeof(Base.allocatedinline), Type{BigRationals.BigRational}})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), Any, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{K, V} where V where K, String})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Chemfiles._warning_callback_adaptator), Ptr{UInt8}})
precompile(Tuple{typeof(Chemfiles.__init__)})
precompile(Tuple{getfield(Base, Symbol("#@__DIR__")), LineNumberNode, Module})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, String, String})
precompile(Tuple{typeof(CrystalNets.julia_main)})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), Any, Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prog, :description, :epilog, :preformatted_epilog, :autofix_names, :add_help, :usage), Tuple{String, String, String, Bool, Bool, Bool, String}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prog, :description, :epilog, :preformatted_epilog, :autofix_names, :add_help, :usage), Tuple{String, String, String, Bool, Bool, Bool, String}}, Symbol})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(ArgParse._add_arg_group!), ArgParse.ArgParseSettings, AbstractString, AbstractString, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{getfield(ArgParse, Symbol("#add_arg_field!##kw")), Any, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, String}})
precompile(Tuple{Type{NamedTuple{(:help, :metavar), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :metavar), Tuple{String, String}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :metavar), Tuple{String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:help, :metavar), Tuple{String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:help, :metavar), Tuple{String, String}}}})
precompile(Tuple{typeof(ArgParse.default_action), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(ArgParse.check_metavar), AbstractString})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :metavar, :required), T} where T<:Tuple}, Tuple{String, String, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :metavar, :required), Tuple{String, String, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :metavar, :required), Tuple{String, String, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :required), Tuple{String, String, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :required), Tuple{String, String, Bool}}}})
precompile(Tuple{typeof(ArgParse.check_arg_name), AbstractString})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.deepcopy), Bool})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.looks_like_an_option), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(ArgParse.parse1_flag!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool, AbstractString})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(ArgParse.parse1_optarg!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Any, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{Any}, AbstractString})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Int64, String}}, String})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{PeriodicGraphs.PeriodicGraph{N} where N}, String})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64})
precompile(Tuple{getfield(Base, Symbol("#@_inline_meta")), LineNumberNode, Module})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.length), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Union{StaticArrays.Dynamic, Int64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Union{StaticArrays.Dynamic, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, StaticArrays.Dynamic, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{StaticArrays.SOneTo{3}, Int64}})
precompile(Tuple{Type{PeriodicGraphs.PeriodicGraph{3}}, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{PeriodicGraphs.PeriodicVertex{3}, 1}, 1}, typeof(Base.copy)}})
precompile(Tuple{typeof(Base.Math.cosd), Int64})
precompile(Tuple{typeof(Base.Math.sind), Int64})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Float64}, Tuple{Int64, Int64, Int64}, Int64, Vararg{Number, N} where N})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Float64, 2}, Tuple{Int64, Float64, Float64, Int64, Float64, Float64, Int64, Int64, Float64}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{3, 3}, Base.MPFR.BigFloat, 2, 9}}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.copyto!), Array{PeriodicGraphs.PeriodicEdge{3}, 1}, PeriodicGraphs.PeriodicEdgeIter{3}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(SparseArrays.spzeros), Type{Int64}, Type{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Int64, 1, SparseArrays.SparseMatrixCSC{Int64, Int64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, false}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto_unaliased!), Base.IndexCartesian, Base.SubArray{Int64, 1, SparseArrays.SparseMatrixCSC{Int64, Int64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, false}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), SparseArrays.SparseMatrixCSC{Int64, Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(SparseArrays.dimlub), Array{Int64, 1}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1}, Int64, Int64, Function})
precompile(Tuple{typeof(SparseArrays.sparse!), Array{Int64, 1}, Array{Int64, 1}, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1}, Int64, Int64, typeof(Base.:(+)), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1}})
precompile(Tuple{typeof(Base.gcdx), Int32, Int64})
precompile(Tuple{typeof(Base._copyto_impl!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Int64}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{DataType, Base.BottomRF{typeof(Base.mul_prod)}}, Base.MPFR.BigFloat, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mul_prod), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(/)), Base.MPFR.BigFloat, Float64})
precompile(Tuple{typeof(Base.log), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(/)), Int64, CrystalNets.Modulos.Modulo{2147483647, Int32}})
precompile(Tuple{typeof(Base.:(/)), CrystalNets.Modulos.Modulo{2147483647, Int32}, CrystalNets.Modulos.Modulo{2147483647, Int32}})
precompile(Tuple{typeof(Base.allocatedinline), Type{CrystalNets.Modulos.Modulo{2147483647, Int32}}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 2}, Int64, Array{Int64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), SparseArrays.SparseMatrixCSC{CrystalNets.Modulos.Modulo{2147483647, Int32}, Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(SparseArrays._setindex_scalar!), SparseArrays.SparseMatrixCSC{CrystalNets.Modulos.Modulo{2147483647, Int32}, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.:(/)), Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1}, CrystalNets.Modulos.Modulo{2147483647, Int32}})
precompile(Tuple{typeof(Base.copyto_unaliased!), Base.IndexLinear, Base.SubArray{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Base.IndexLinear, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1}})
precompile(Tuple{typeof(Base.GMP.MPZ.set_si), Int32})
precompile(Tuple{typeof(LinearAlgebra.mul!), Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 2}, SparseArrays.SparseMatrixCSC{Int64, Int64}, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 2}, Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(LinearAlgebra.mul!), Array{Base.GMP.BigInt, 2}, SparseArrays.SparseMatrixCSC{Int64, Int64}, Array{Base.GMP.BigInt, 2}, Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Array{Base.GMP.BigInt, 2}, Array{Base.GMP.BigInt, 2}})
precompile(Tuple{typeof(Base.GMP.MPZ.sqrt), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{Type{Int128}, Base.GMP.BigInt})
precompile(Tuple{Type{Base.Rational{Int128}}, Base.GMP.BigInt, Int128})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Rational{Int128}})
precompile(Tuple{typeof(LinearAlgebra.mul!), Array{Base.Rational{Base.GMP.BigInt}, 2}, SparseArrays.SparseMatrixCSC{Int64, Int64}, Array{Base.Rational{Base.GMP.BigInt}, 2}, Bool, Bool})
precompile(Tuple{Type{Int64}, Base.Rational{Base.GMP.BigInt}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Rational{Int128}}})
precompile(Tuple{typeof(Base._typed_hcat), Type{Base.Rational{Int128}}, Tuple{Array{Base.Rational{Int128}, 1}, Array{Base.Rational{Int128}, 2}}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Int128, 2}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Int128, 2}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(PeriodicGraphs.offset_representatives!), PeriodicGraphs.PeriodicGraph{3}, Array{StaticArrays.SArray{Tuple{3}, Int64, 1, 3}, 1}})
precompile(Tuple{typeof(LightGraphs.induced_subgraph), PeriodicGraphs.PeriodicGraph{3}, Array{Int64, 1}})
precompile(Tuple{typeof(Core.Compiler._typename), DataType})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{1}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{StaticArrays.Dynamic}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Any}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{StaticArrays.Dynamic}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{StaticArrays.Dynamic}, 1}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple{Any}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Any}, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#@_propagate_inbounds_meta")), LineNumberNode, Module})
precompile(Tuple{getfield(Base, Symbol("#@boundscheck")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 3}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Vararg{Int64, N} where N}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple{Vararg{Int64, N} where N}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3, 3)}, Int64})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.HasShape{2}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 2}, Symbol, Int64})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{2}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Tuple{Int64, Int64}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{Base.IteratorsMD.CartesianIndex{2}, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64, Int64}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 2}, Expr, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int16}, 2, 9}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Expr}})
precompile(Tuple{typeof(Base.vcat), Array{Expr, 1}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3,)}, Int64})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 2}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 1}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 1}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 1}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 2}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 1}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3, 2)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(3, 1)}, Int64})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int8}, 2, 9}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int16}, 2, 9}, 1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{9}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{9}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{9}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{9}}})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{StaticArrays.SOneTo{9}, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64, Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.length), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Int64, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Int64}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{Int64, Tuple{StaticArrays.SOneTo{3}, Int64}}})
precompile(Tuple{typeof(StaticArrays.out_index_size), Type{StaticArrays.Size{(3,)}}, Vararg{Type{T} where T<:(StaticArrays.Size{S} where S), N} where N})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{}, Type{StaticArrays.Size{(3,)}}, Type{T} where T})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{Int64}, Type{StaticArrays.Size{()}}})
precompile(Tuple{typeof(StaticArrays.linear_index_size), Type{StaticArrays.Size{(3,)}}, Vararg{Type{T} where T<:(StaticArrays.Size{S} where S), N} where N})
precompile(Tuple{typeof(StaticArrays._linear_index_size), Tuple{}, Type{StaticArrays.Size{(3,)}}, Type{T} where T})
precompile(Tuple{typeof(StaticArrays._linear_index_size), Tuple{Int64}, Type{StaticArrays.Size{()}}})
precompile(Tuple{Type{Array{Expr, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.isempty), Array{Expr, 2}})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{Base.Colon}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{Int64}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 2}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Any}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple, 1}, Int64})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Base.Rational{Int64}})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{Tuple{Int64, Int64}, Int64}})
precompile(Tuple{typeof(CrystalNets.topological_key), CrystalNets.CrystalNet{Base.Rational{Int8}}})
precompile(Tuple{getfield(Base, Symbol("#reduce##kw")), NamedTuple{(:init,), Tuple{Int16}}, typeof(Base.reduce), Function, StaticArrays.SArray{Tuple{3}, Int16, 1, 3}})
precompile(Tuple{typeof(StaticArrays._mapfoldl), typeof(Base.identity), typeof(Base.lcm), Base.Colon, Int16, StaticArrays.Size{(3,)}, StaticArrays.SArray{Tuple{3}, Int16, 1, 3}})
precompile(Tuple{Type{Base.Rational{Int16}}, Base.Rational{Int16}})
precompile(Tuple{typeof(Base.:(+)), Base.Rational{Int16}, Base.Rational{Int8}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, Tuple{Base.Rational{Int16}, Base.Rational{Int16}, Base.Rational{Int16}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}}})
precompile(Tuple{typeof(Base.:(<)), StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}})
precompile(Tuple{typeof(Base.cmp), StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}})
precompile(Tuple{typeof(Base.:(==)), StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}})
precompile(Tuple{typeof(Base.push!), Array{StaticArrays.SArray{Tuple{3}, Int64, 1, 3}, 1}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(PeriodicGraphs.graph_width!), PeriodicGraphs.PeriodicGraph{3}})
precompile(Tuple{typeof(PeriodicGraphs.coordination_sequence), PeriodicGraphs.PeriodicGraph{3}, Int64, Int64})
precompile(Tuple{typeof(LightGraphs._neighborhood), PeriodicGraphs.PeriodicGraph{3}, Int64, Int64, LightGraphs.DefaultDistance, Function})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(Base.deleteat!), Array{Array{Int64, 1}, 1}, Base.BitArray{1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Tuple{Int64, Array{Int64, 1}}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Array{Int64, 1}}, 1}}})
precompile(Tuple{typeof(Base.allunique), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Array{Int64, 1}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Threads.threading_run), Function})
precompile(Tuple{Type{Array{Base.Rational{Int16}, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{typeof(Base.view), Array{Base.Rational{Int16}, 2}, Function, Int64})
precompile(Tuple{typeof(Base.to_indices), Array{Base.Rational{Int16}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.Colon, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Base.SubArray{Base.Rational{Int16}, 1, Array{Base.Rational{Int16}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Rational{Int16}}})
precompile(Tuple{typeof(LinearAlgebra.rank), Array{Base.Rational{Int16}, 2}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Tuple{Array{Base.Rational{Int16}, 2}, Array{Int64, 1}}})
precompile(Tuple{Type{Array{Expr, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.isempty), Array{Expr, 1}})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{Int64}, Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{typeof(StaticArrays._linear_index_size), Tuple{Int64}, Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{typeof(Base.getindex), Type{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int16}, 2, 9}}})
precompile(Tuple{typeof(Base.copy), Array{Int64, 1}})
precompile(Tuple{Type{StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}, Int64})
precompile(Tuple{typeof(Base.append!), Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int16}, 2, 9}, 1}, Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int16}, 2, 9}, 1}})
precompile(Tuple{typeof(Base.:(>)), StaticArrays.SArray{Tuple{3}, Int64, 1, 3}, StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}})
precompile(Tuple{typeof(Base.:(<)), StaticArrays.SArray{Tuple{3}, Int64, 1, 3}, StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int16}, 2, 9}, 1}}, Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int16}, 2, 9}, 1}, Int64})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, 1}}})
precompile(Tuple{typeof(Base.divrem), Base.GMP.BigInt, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Base.GMP.BigInt, 2}, Array{Base.GMP.BigInt, 1}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.print_to_string), PeriodicGraphs.PeriodicGraph{3}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Char, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Union{Array{String, 1}, String}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Array{String, 1}, String}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{String, Union{Array{String, 1}, String}}, Int64})
precompile(Tuple{typeof(Base.findprev), Base.Fix2{typeof(Base.:(==)), Char}, String, Int64})
precompile(Tuple{Type{Base.Dict{String, Int64}}, Base.Pair{String, Int64}, Vararg{Base.Pair{String, Int64}, N} where N})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_forwardslash), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_minus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.Math.cosd), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Math.sind), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(^)), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.:(-)), Int64, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(+)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(/)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Base.MPFR.BigFloat}, Tuple{Int64, Int64, Int64}, Base.MPFR.BigFloat, Vararg{Number, N} where N})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Base.MPFR.BigFloat, 2}, Tuple{Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Int64, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Int64, Int64, Base.MPFR.BigFloat}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(CrystalNets.parsestrip), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(CrystalNets.parsestrip), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Base.MPFR.BigFloat, 1}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.invperm), Array{Int64, 1}})
precompile(Tuple{Type{Array{Bool, 2}}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Array{Float64, 1}, 1}, Int64, Array{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, StaticArrays.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{CrystalNets.EquivalentPosition, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.hcat), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(LinearAlgebra.norm), Base.SubArray{Base.MPFR.BigFloat, 1, StaticArrays.SArray{Tuple{3, 3}, Base.MPFR.BigFloat, 2, 9}, Tuple{Base.Slice{StaticArrays.SOneTo{3}}, Int64}, true}, Int64})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(LinearAlgebra.dot), Base.SubArray{Base.MPFR.BigFloat, 1, StaticArrays.SArray{Tuple{3, 3}, Base.MPFR.BigFloat, 2, 9}, Tuple{Base.Slice{StaticArrays.SOneTo{3}}, Int64}, true}, Base.SubArray{Base.MPFR.BigFloat, 1, StaticArrays.SArray{Tuple{3, 3}, Base.MPFR.BigFloat, 2, 9}, Tuple{Base.Slice{StaticArrays.SOneTo{3}}, Int64}, true}})
precompile(Tuple{typeof(Base.acos), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Math.rad2deg), Base.MPFR.BigFloat})
precompile(Tuple{Type{Chemfiles.Frame}})
precompile(Tuple{Type{Chemfiles.UnitCell}, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Chemfiles.set_cell!), Chemfiles.Frame, Chemfiles.UnitCell})
precompile(Tuple{Type{Chemfiles.Atom}, String})
precompile(Tuple{typeof(Chemfiles.add_atom!), Chemfiles.Frame, Chemfiles.Atom, Array{Float64, 1}})
precompile(Tuple{Type{Chemfiles.Atom}, Chemfiles.Frame, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{Float64}}})
precompile(Tuple{typeof(Chemfiles.positions), Chemfiles.Frame})
precompile(Tuple{Type{Chemfiles.UnitCell}, Chemfiles.Frame})
precompile(Tuple{typeof(LinearAlgebra.gemv!), Array{Float64, 1}, Char, Array{Float64, 2}, Array{Float64, 1}, Bool, Bool})
precompile(Tuple{typeof(Chemfiles.__free), Chemfiles.CxxPointer{Chemfiles.lib.CHFL_CELL}})
precompile(Tuple{typeof(Chemfiles.__free), Chemfiles.CxxPointer{Chemfiles.lib.CHFL_ATOM}})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(StaticArrays.arithmetic_closure), Type{Base.MPFR.BigFloat}})
precompile(Tuple{Type{Chemfiles.Topology}, Chemfiles.Frame})
precompile(Tuple{typeof(Chemfiles.bonds), Chemfiles.Topology})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Float64})
precompile(Tuple{typeof(Base.cmp), Base.MPFR.BigFloat, Float64})
precompile(Tuple{typeof(Base.allocatedinline), Type{StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{StaticArrays.SArray{Tuple{3}, Int64, 1, 3}, 1}, Int64, Array{Tuple{Int64, Int64, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Chemfiles.__free), Chemfiles.CxxPointer{Chemfiles.lib.CHFL_TOPOLOGY}})
precompile(Tuple{typeof(LightGraphs.connected_components), LightGraphs.SimpleGraphs.SimpleGraph{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(LightGraphs.SimpleGraphs.rem_vertices!), PeriodicGraphs.PeriodicGraph{3}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Bool}, 1, 3}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Bool}, 1, 3}, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Bool}, 1, 3}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Base.:(-)), CrystalNets.Modulos.Modulo{2147483647, Int32}, CrystalNets.Modulos.Modulo{2147483647, Int32}})
precompile(Tuple{Base.BottomRF{typeof(Base.mul_prod)}, Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), CrystalNets.Modulos.Modulo{2147483647, Int32}, Array{CrystalNets.Modulos.Modulo{2147483647, Int32}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(CrystalNets.topological_genome), CrystalNets.CrystalNet{Base.Rational{Int8}}})
precompile(Tuple{typeof(Base.sort!), Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{typeof(LinearAlgebra.norm), Base.Order.ForwardOrdering}, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, 1}})
precompile(Tuple{Type{Base.Rational{Int16}}, Base.Rational{Int8}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isempty), Tuple{Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.isempty), Tuple{Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.isempty), Tuple{Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}}}}})
precompile(Tuple{typeof(Base.all), Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(CrystalNets.minimal_volume_matrix), Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}}})
precompile(Tuple{typeof(Base._copyto_impl!), Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Int64, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int8}, 1, 3}}, 1}})
precompile(Tuple{typeof(Base.:(*)), Base.Rational{Int8}, Base.Rational{Int8}})
precompile(Tuple{typeof(Base.:(-)), Base.Rational{Int8}, Base.Rational{Int8}})
precompile(Tuple{typeof(Base.:(+)), Base.Rational{Int8}, Base.Rational{Int8}})
precompile(Tuple{typeof(CrystalNets.reduce_with_matrix), CrystalNets.CrystalNet{Base.Rational{Int8}}, StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int8}, 2, 9}})
precompile(Tuple{typeof(Base.:(//)), Base.Rational{Int8}, Base.Rational{Int8}})
precompile(Tuple{typeof(Base.copyto_unaliased!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, 1}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(CrystalNets.find_all_valid_translations), CrystalNets.CrystalNet{Base.Rational{Int16}}})
precompile(Tuple{typeof(Base.sort!), Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{typeof(LinearAlgebra.norm), Base.Order.ForwardOrdering}, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, 1}})
precompile(Tuple{Type{Base.Rational{Int32}}, Base.Rational{Int16}})
precompile(Tuple{typeof(Base.:(+)), Base.Rational{Int32}, Base.Rational{Int16}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}}, Tuple{Base.Rational{Int32}, Base.Rational{Int32}, Base.Rational{Int32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int32}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}}})
precompile(Tuple{typeof(Base.:(<)), StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}})
precompile(Tuple{typeof(Base.cmp), StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}})
precompile(Tuple{typeof(Base.:(==)), StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isempty), Tuple{Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.isempty), Tuple{Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.isempty), Tuple{Tuple{Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}, Array{Tuple{Int64, Int64, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}, 1}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int32}, 2, 9}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int32}, 2, 9}, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.:(==)), Core.PhiNode, Base.Rational{Int128}})
precompile(Tuple{typeof(CrystalNets.topological_key), CrystalNets.CrystalNet{Base.Rational{Int16}}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#reduce##kw")), NamedTuple{(:init,), Tuple{Int32}}, typeof(Base.reduce), Function, StaticArrays.SArray{Tuple{3}, Int32, 1, 3}})
precompile(Tuple{typeof(StaticArrays._mapfoldl), typeof(Base.identity), typeof(Base.lcm), Base.Colon, Int32, StaticArrays.Size{(3,)}, StaticArrays.SArray{Tuple{3}, Int32, 1, 3}})
precompile(Tuple{Type{Base.Rational{Int32}}, Base.Rational{Int32}})
precompile(Tuple{Type{Array{Base.Rational{Int32}, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{typeof(Base.view), Array{Base.Rational{Int32}, 2}, Function, Int64})
precompile(Tuple{typeof(Base.to_indices), Array{Base.Rational{Int32}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.Colon, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Base.SubArray{Base.Rational{Int32}, 1, Array{Base.Rational{Int32}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, StaticArrays.SArray{Tuple{3}, Int64, 1, 3}}}, StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Rational{Int32}}})
precompile(Tuple{typeof(LinearAlgebra.rank), Array{Base.Rational{Int32}, 2}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Tuple{Array{Base.Rational{Int32}, 2}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int32}, 2, 9}}})
precompile(Tuple{typeof(Base.append!), Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int32}, 2, 9}, 1}, Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int32}, 2, 9}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int32}, 2, 9}, 1}}, Array{StaticArrays.SArray{Tuple{3, 3}, Base.Rational{Int32}, 2, 9}, 1}, Int64})
precompile(Tuple{typeof(Base.:(>)), StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}, StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}})
precompile(Tuple{typeof(Base.:(<)), StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}, StaticArrays.SizedArray{Tuple{3}, Int64, 1, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int64}, 1, 3}, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{StaticArrays.SArray{Tuple{3}, Base.Rational{Int16}, 1, 3}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CrystalNets.topological_genome), CrystalNets.CrystalNet{Base.Rational{Int16}}})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, String, String, String})
precompile(Tuple{typeof(Chemfiles.add_bond!), Chemfiles.Frame, Int64, Int64})
precompile(Tuple{typeof(Chemfiles.__free), Chemfiles.CxxPointer{Chemfiles.lib.CHFL_FRAME}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.min), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), Base._InitialValue, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.:(!=)), Float64, Float64})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Float64, 2}, Int64, Float64, Type{Float64}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.min), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nref")), LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, StaticArrays.SArray{Tuple{3}, Float64, 1, 3}, Base.IteratorsMD.CartesianIndices{1, Tuple{StaticArrays.SOneTo{3}}}})
precompile(Tuple{Type{Chemfiles.Trajectory}, String, Char, String})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{typeof(ArgParse.show_help), IO, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Array{Any, 1}}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Array{Any, 1}}, String})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(ArgParse.println_unnbsp), IO, Any})
precompile(Tuple{typeof(ArgParse.print_group), IO, Array{T, 1} where T, AbstractString, Int64, Int64, AbstractString, AbstractString, AbstractString})
precompile(Tuple{typeof(Chemfiles.__free), Chemfiles.CxxPointer{Chemfiles.lib.CHFL_TRAJECTORY}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{Type{NamedTuple{(:break_long_words, :break_on_hyphens, :initial_indent, :subsequent_indent), T} where T<:Tuple}, Tuple{Bool, Bool, String, String}})
precompile(Tuple{typeof(ArgParse.println_unnbsp), IO, Any, Vararg{Any, N} where N})
